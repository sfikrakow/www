# Generated by Django 3.0.5 on 2020-05-26 22:10
from django.contrib.contenttypes.models import ContentType
from django.db import migrations
from wagtail.core.models import Page


class Migration(migrations.Migration):
    dependencies = [
        ('wagtailcore', '0045_assign_unlock_grouppagepermission'),
        ('wagtailforms', '0004_add_verbose_name_plural'),
        ('wagtailredirects', '0006_redirect_increase_max_length'),
        ('agenda', '0011_event_recording'),
    ]

    def dfs_delete(self, page: Page):
        for ch in Page.objects.child_of(page).all():
            self.dfs_delete(ch)
        # Wagtail does not allow deleting orphaned Pages when a model with the same name exists... too bad!
        Page.objects.filter(id=page.id)._raw_delete(Page.objects.db)

    def cleanup(self):
        # HACK!!!
        types = [x.id for x in ContentType.objects.all()]
        orphaned_pages = set(Page.objects.exclude(content_type_id__in=types).all())
        category_index_type = ContentType.objects.filter(app_label='agenda', model='categoryindex').first()
        if category_index_type:
            orphaned_pages |= set(Page.objects.filter(content_type_id=category_index_type.id).all())
        category_type = ContentType.objects.filter(app_label='agenda', model='category').first()
        if category_type:
            orphaned_pages |= set(Page.objects.filter(content_type_id=category_type.id).all())
        orphaned_pages = [p.id for p in orphaned_pages]
        for id in orphaned_pages:
            p = Page.objects.filter(id=id).first()
            if p:
                self.dfs_delete(p)

    operations = [
        migrations.RemoveField(
            model_name='event',
            name='event_category',
        ),
        migrations.RunPython(cleanup),
        migrations.DeleteModel(
            name='Category',
        ),
        migrations.DeleteModel(
            name='CategoryIndex',
        ),
    ]
